classdef nestapp < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                      matlab.ui.Figure
        GridLayout                    matlab.ui.container.GridLayout
        LeftPanel                     matlab.ui.container.Panel
        StepsListBoxLabel             matlab.ui.control.Label
        InfoTextArea                  matlab.ui.control.TextArea
        CommandDescriptionLabel       matlab.ui.control.Label
        StepsListBox                  matlab.ui.control.ListBox
        CenterPanel                   matlab.ui.container.Panel
        SelectedListBoxLabel_2        matlab.ui.control.Label
        TextArea                      matlab.ui.control.TextArea
        DefaultValueButton            matlab.ui.control.Button
        UITable                       matlab.ui.control.Table
        SelectedListBoxLabel          matlab.ui.control.Label
        SavePipelineButton            matlab.ui.control.Button
        LoadPipelineButton            matlab.ui.control.Button
        RemoveButton                  matlab.ui.control.Button
        AddButton                     matlab.ui.control.Button
        MoveDownButton                matlab.ui.control.Button
        MoveUpButton                  matlab.ui.control.Button
        SelectedListBox               matlab.ui.control.ListBox
        RightPanel                    matlab.ui.container.Panel
        RunningstepEditField          matlab.ui.control.EditField
        RunningstepEditFieldLabel     matlab.ui.control.Label
        ProcessingfileEditField       matlab.ui.control.EditField
        ProcessingfileEditFieldLabel  matlab.ui.control.Label
        outofEditField                matlab.ui.control.EditField
        outofEditFieldLabel           matlab.ui.control.Label
        ReStartStepsButton            matlab.ui.control.Button
        EEGLABpathifalreadyisnotinpathPanel  matlab.ui.container.Panel
        SelectEEGLABFolderButton      matlab.ui.control.Button
        PathEditField                 matlab.ui.control.EditField
        PathEditFieldLabel            matlab.ui.control.Label
        NESTAPPLabel                  matlab.ui.control.Label
        Image                         matlab.ui.control.Image
        RunAnalysisButton             matlab.ui.control.Button
        SelectDatatoPerformAnalysisPanel  matlab.ui.container.Panel
        SelectDataButton              matlab.ui.control.Button
        FileEditField                 matlab.ui.control.EditField
        FileEditFieldLabel            matlab.ui.control.Label
        FolderEditField               matlab.ui.control.EditField
        FolderEditFieldLabel          matlab.ui.control.Label
        Panel                         matlab.ui.container.Panel
    end

    % Properties that correspond to apps with auto-reflow
    properties (Access = private)
        onePanelWidth = 576;
        twoPanelWidth = 768;
    end

    
    properties (Access = private)
        ItemNum % Number of selected Items
    end
    
    properties (Access = public)
        selectedItem % Selected Table Item Values
        info % Command Information and description
        path % File Path
        file % File Name
        steps2run % Stores the steps we select to run
        nstep; % Step Number in steps2run
        initialVars; % Stores initial vars generated by eeglab
        ChangedVal % Non-Default Value for each eeglab function
        DefaultsVal % Storing default values for each eeglab function
        convert = 0;
        needchanloc = 1;
        NSelecFiles
        clickedItem = [];
        doubleClicked = 0;
    end
    

    % Callbacks that handle component events
    methods (Access = private)

        % Code that executes after component creation
        function startupFcn(app)
            clc
            defaultValues;
            commandInfo;
            for i = 1 : size(app.StepsListBox.Items,2)
                xname = app.StepsListBox.Items{i};
                xname(xname==' ')='_';
                xname(xname=='-')='_';
                xname(xname=='(')=[];
                xname(xname==')')=[];
                fields = fieldnames(eval(xname));
                var = cell(numel(fields),1);
                val = cell(numel(fields),1);
                for j = 1:numel(fields)
                    var{j,1} = string(fields{j});
                    V = getfield(eval(xname),fields{j});
                    if ischar(V)
                        val{j,1} = string(V);
                    elseif isempty(V)
                        val{j,1} ="[]";
                    elseif iscell(V)
                        val{j,1} = [string(V)];
                    else
                        val{j,1} = V;
                    end
                end
                t = table(var,val);
                infoname = ['info_',xname];
                app.info{i} = eval(infoname);
                app.DefaultsVal{i} = t;
                
            end
            app.SelectedListBox.Items(:)=[];
            app.SelectedListBox.ItemsData(:)=[];
            app.UITable.Data = [];
            app.ItemNum = 1;
            app.needchanloc = 1;
            clc
        end

        % Button pushed function: ReStartStepsButton
        function ReStartStepsButtonPushed(app, event)
            clc
%             defaultValues;
%             commandInfo;
%             for i = 1 : size(app.StepsListBox.Items,2)
%                 xname = app.StepsListBox.Items{i};
%                 replace(xname,' ','_');
%                 replace(xname,'-','_');
%                 replace(xname,'(','_');
%                 replace(xname,')','_');
%                 fields = fieldnames(eval(xname));
%                 var = cell(numel(fields),1);
%                 val = cell(numel(fields),1);
%                 for j = 1:numel(fields)
%                     var{j,1} = string(fields{j});
%                     V = getfield(eval(xname),fields{j});
%                     if ischar(V)
%                         val{j,1} = string(V);
%                     elseif isempty(V)
%                         val{j,1} ="[]";
%                     elseif iscell(V)
%                         val{j,1} = [string(V)];
%                     else
%                         val{j,1} = V;
%                     end
%                 end
%                 t = table(var,val);
%                 infoname = ['info_',xname];
%                 app.info{i} = eval(infoname);
%                 app.DefaultsVal{i} = t;
%             end
            app.SelectedListBox.Items(:)=[];
            app.SelectedListBox.ItemsData(:)=[];
            app.UITable.Data = [];
            app.ItemNum = 0;
            app.nstep = 1;
            app.needchanloc = 1;
        end

        % Button pushed function: AddButton
        function AddButtonPushed(app, event)

            if isempty(app.SelectedListBox.Items)
                ind = find(ismember(app.StepsListBox.Items,app.StepsListBox.Value));
                app.SelectedListBox.Items{1} = app.StepsListBox.Value;
                app.SelectedListBox.ItemsData{1} = ['item',num2str(1)];
                app.ChangedVal{1}=app.DefaultsVal{ind};
            elseif isempty(app.SelectedListBox.Items{1})
                ind = find(ismember(app.StepsListBox.Items,app.StepsListBox.Value));
                app.SelectedListBox.Items{1} = app.StepsListBox.Value;
                app.SelectedListBox.ItemsData{1} = ['item',num2str(1)];
                app.ChangedVal{1}=app.DefaultsVal{ind};
            else
                ind = find(ismember(app.StepsListBox.Items,app.StepsListBox.Value));
                app.ItemNum = numel(app.SelectedListBox.Items);
                app.SelectedListBox.Items{app.ItemNum+1} = app.StepsListBox.Value;
                app.SelectedListBox.ItemsData{app.ItemNum+1} = ['item',num2str(app.ItemNum+1)];
                app.ChangedVal{app.ItemNum+1}=app.DefaultsVal{ind};
            end
            app.updateAppLayout
        end

        % Button pushed function: RemoveButton
        function RemoveButtonPushed(app, event)
            ind = find(ismember(app.SelectedListBox.ItemsData,app.SelectedListBox.Value));
            app.SelectedListBox.Items(ind) = [];
            app.SelectedListBox.ItemsData(ind) =[];
            app.ChangedVal(ind)=[];
            for i = ind : length(app.SelectedListBox.ItemsData)
                app.SelectedListBox.ItemsData{i} = ['Item',num2str(i)];
            end
        end

        % Button pushed function: MoveUpButton
        function MoveUpButtonPushed(app, event)
            value = app.SelectedListBox.Value;
            ind1 = find(ismember(app.SelectedListBox.ItemsData,value));
            if ind1 ~= 1
                A = app.SelectedListBox.Items{ind1-1};
                B = app.SelectedListBox.Items{ind1};
                app.SelectedListBox.Items{ind1-1} = B;
                app.SelectedListBox.Items{ind1} = A;

                app.SelectedListBox.ItemsData{ind1-1} = strcat('Item',num2str(ind1-1));
                app.SelectedListBox.ItemsData{ind1} = strcat('Item',num2str(ind1));
                C = app.ChangedVal{ind1-1};
                D = app.ChangedVal{ind1};
                app.ChangedVal{ind1-1} = D;
                app.ChangedVal{ind1} = C;
            end
            app.SelectedListBox.Value=app.SelectedListBox.ItemsData{ind1-1};
        end

        % Button pushed function: MoveDownButton
        function MoveDownButtonPushed(app, event)
            value = app.SelectedListBox.Value;
            ind1 = find(ismember(app.SelectedListBox.ItemsData,value));
            if ind1 ~= numel(app.SelectedListBox.Items)
                A = app.SelectedListBox.Items{ind1+1};
                B = app.SelectedListBox.Items{ind1};
                app.SelectedListBox.Items{ind1+1} = B;
                app.SelectedListBox.Items{ind1} = A;

                app.SelectedListBox.ItemsData{ind1+1} = strcat('Item',num2str(ind1+1));
                app.SelectedListBox.ItemsData{ind1} = strcat('Item',num2str(ind1));
                C = app.ChangedVal{ind1+1};
                D = app.ChangedVal{ind1};
                app.ChangedVal{ind1+1} = D;
                app.ChangedVal{ind1} = C;
            end
            app.SelectedListBox.Value=app.SelectedListBox.ItemsData{ind1+1};
        end

        % Button pushed function: DefaultValueButton
        function DefaultValueButtonPushed(app, event)
            ind2 = find(ismember(app.SelectedListBox.ItemsData,app.SelectedListBox.Value));
            ind1 = find(ismember(app.StepsListBox.Items,app.SelectedListBox.Items{ind2}));
            app.ChangedVal{ind2} = app.DefaultsVal{ind1};
            app.UITable.Data = app.DefaultsVal{ind1};
        end

        % Button pushed function: LoadPipelineButton
        function LoadPipelineButtonPushed(app, event)
            [pName,pPath] = uigetfile('*.mat');
            load([pPath,pName],'-mat')
            app.SelectedListBox.Items = PLItems;
            app.SelectedListBox.ItemsData = PLItemsData;
            app.ChangedVal = VarIns;
            app.UITable.Data = [];
        end

        % Button pushed function: SavePipelineButton
        function SavePipelineButtonPushed(app, event)
            PLItems = app.SelectedListBox.Items;
            PLItemsData = app.SelectedListBox.ItemsData;
            VarIns = app.ChangedVal;
            uisave({'PLItems','PLItemsData','VarIns'},'*.mat')
        end

        % Value changed function: FolderEditField
        function FolderEditFieldValueChanged(app, event)
            value = app.FolderEditField.Value;
        end

        % Button pushed function: SelectDataButton
        function SelectDataButtonPushed(app, event)
            try
                [app.file,app.path] = uigetfile( ...
                    {'*.set;*.vhdr;*.cdt;*.cnt',...
                    'Data Files (*.set,*.vhdr,*.cdt,*.cnt)'; ...
                    '*.set','Set Files (*.set)'; ...
                    '*.vhdr','VHDR Files (*.vhdr)'; ...
                    '*.cdt','CDT Files (*.cdt)'; ...
                    '*.cnt','CNT Files (*.cnt)'; ...
                    '*.*',  'All Files (*.*)'}, ...
                    'Select File(s)','multiSelect','on');
                if iscell(app.file)
                    app.NSelecFiles = numel(app.file);
                else
                    app.NSelecFiles = 1;
                    app.file = {app.file};
                end
                
                assignin('base','files',app.file)
                assignin('base','paths',app.path)
                
                app.FileEditField.Value = app.file{1};
                app.FolderEditField.Value = app.path;
                app.outofEditField.Value = num2str(max(size(app.file)));
                 
            catch
                warning('Please select at least one file!')
                app.FileEditField.Value = '';
                app.FolderEditField.Value = '';
            end
        end

        % Button pushed function: SelectEEGLABFolderButton
        function SelectEEGLABFolderButtonPushed(app, event)
            try
                eeglabpath = uigetdir('*.*','Select EEGLAB Folder');
                app.PathEditField.Value=eeglabpath;
                addpath(eeglabpath)
            catch
                warning('Please select at least one file!')
                app.PathEditField.Value= '';
                
            end
        end

        % Value changed function: FileEditField
        function FileEditFieldValueChanged(app, event)
            value = app.FileEditField.Value;
        end

        % Value changed function: StepsListBox
        function StepsListBoxValueChanged(app, event)
            value = app.StepsListBox.Value;
            ind = find(ismember(app.StepsListBox.Items,value));
            app.InfoTextArea.Value = string(app.info{ind});
            app.selectedItem = [];
        end

        % Value changed function: SelectedListBox
        function SelectedListBoxValueChanged(app, event)
            value = app.SelectedListBox.Value;
            indNum2 = find(ismember(app.SelectedListBox.ItemsData,value));
            ItemName = app.SelectedListBox.Items{indNum2};
            indNum1 = find(ismember(app.StepsListBox.Items,ItemName));
            app.UITable.Data = app.DefaultsVal{indNum1};
            
            if ~isequal(table2struct(app.ChangedVal{indNum2}),table2struct(app.DefaultsVal{indNum1}))
                app.UITable.Data = app.ChangedVal{indNum2};
            end
            
            app.TextArea.Value='';
        end

        % Cell selection callback: UITable
        function UITableCellSelection(app, event)
            
            app.selectedItem = event.Indices;
            x = app.UITable.Data{app.selectedItem(1),app.selectedItem(2)};
            y = x{:};
            app.convert = isnumeric(y);
            if app.convert
                app.TextArea.Value = string(y);
            else
                app.TextArea.Value = y;
            end
        end

        % Cell edit callback: UITable
        function UITableCellEdit(app, event)
            indices = event.Indices;
            newData = event.NewData;

            value = app.SelectedListBox.Value;
            indNum2 = find(ismember(app.SelectedListBox.ItemsData,value));
            app.ChangedVal{indNum2} = app.UITable.Data;
        end

        % Value changed function: TextArea
        function TextAreaValueChanged(app, event)
            value = app.TextArea.Value;
            value(strcmp(value,''))=[];
            if app.convert
                app.UITable.Data{app.selectedItem(1),app.selectedItem(2)} = {str2double(value(:))};
            else
                if numel(value)>1
                    app.UITable.Data{app.selectedItem(1),app.selectedItem(2)} = {value};
                else
                    app.UITable.Data{app.selectedItem(1),app.selectedItem(2)} = value;
                end
            end
            val = app.SelectedListBox.Value;
            indNum2 = find(ismember(app.SelectedListBox.ItemsData,val));
            app.ChangedVal{indNum2} = app.UITable.Data;
        end

        % Button pushed function: RunAnalysisButton
        function RunAnalysisButtonPushed(app, event)
            app.RunAnalysisButton.Text = {'Run';'Analysis'};
            app.needchanloc = 1;
            EEG_TMS_Preprocessing_Commands;
            
        end

        % Double-clicked callback: SelectedListBox
        function SelectedListBoxDoubleClicked(app, event)
            % This will be used to add items to the list below the double clicked item.
            % Will be added in future to the app;
            % item = event.InteractionInformation.Item;
            % app.clickedItem = item;
            % app.doubleClicked = 1;
        end

        % Value changed function: RunningstepEditField
        function RunningstepEditFieldValueChanged(app, event)
            app.RunningstepEditField.Value=Step;
            
        end

        % Changes arrangement of the app based on UIFigure width
        function updateAppLayout(app, event)
            currentFigureWidth = app.UIFigure.Position(3);
            if(currentFigureWidth <= app.onePanelWidth)
                % Change to a 3x1 grid
                app.GridLayout.RowHeight = {480, 480, 480};
                app.GridLayout.ColumnWidth = {'1x'};
                app.CenterPanel.Layout.Row = 1;
                app.CenterPanel.Layout.Column = 1;
                app.LeftPanel.Layout.Row = 2;
                app.LeftPanel.Layout.Column = 1;
                app.RightPanel.Layout.Row = 3;
                app.RightPanel.Layout.Column = 1;
            elseif (currentFigureWidth > app.onePanelWidth && currentFigureWidth <= app.twoPanelWidth)
                % Change to a 2x2 grid
                app.GridLayout.RowHeight = {480, 480};
                app.GridLayout.ColumnWidth = {'1x', '1x'};
                app.CenterPanel.Layout.Row = 1;
                app.CenterPanel.Layout.Column = [1,2];
                app.LeftPanel.Layout.Row = 2;
                app.LeftPanel.Layout.Column = 1;
                app.RightPanel.Layout.Row = 2;
                app.RightPanel.Layout.Column = 2;
            else
                % Change to a 1x3 grid
                app.GridLayout.RowHeight = {'1x'};
                app.GridLayout.ColumnWidth = {220, '1x', 221};
                app.LeftPanel.Layout.Row = 1;
                app.LeftPanel.Layout.Column = 1;
                app.CenterPanel.Layout.Row = 1;
                app.CenterPanel.Layout.Column = 2;
                app.RightPanel.Layout.Row = 1;
                app.RightPanel.Layout.Column = 3;
            end
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Get the file path for locating images
            pathToMLAPP = fileparts(mfilename('fullpath'));

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.AutoResizeChildren = 'off';
            colormap(app.UIFigure, 'parula');
            app.UIFigure.Position = [100 100 859 480];
            app.UIFigure.Name = 'MATLAB App';
            app.UIFigure.SizeChangedFcn = createCallbackFcn(app, @updateAppLayout, true);
            app.UIFigure.Scrollable = 'on';

            % Create GridLayout
            app.GridLayout = uigridlayout(app.UIFigure);
            app.GridLayout.ColumnWidth = {220, '1x', 221};
            app.GridLayout.RowHeight = {'1x'};
            app.GridLayout.ColumnSpacing = 0;
            app.GridLayout.RowSpacing = 0;
            app.GridLayout.Padding = [0 0 0 0];
            app.GridLayout.Scrollable = 'on';

            % Create LeftPanel
            app.LeftPanel = uipanel(app.GridLayout);
            app.LeftPanel.Layout.Row = 1;
            app.LeftPanel.Layout.Column = 1;
            app.LeftPanel.Scrollable = 'on';

            % Create StepsListBox
            app.StepsListBox = uilistbox(app.LeftPanel);
            app.StepsListBox.Items = {'Load Data', 'Load Channel Location', 'Save New Set', 'Choose Data Set', 'Remove un-needed Channels', 'Remove Baseline', 'Remove Bad Channels', 'Clean Artifacts', 'Automatic Continuous Rejection', 'Automatic Cleaning Data', 'De-Trend Epoch', 'TESA De-Trend', 'Re-Sample', 'Re-Reference', 'Frequency Filter (CleanLine)', 'Frequency Filter (TESA)', 'Frequency Filter', 'Run ICA', 'Run TESA ICA', 'Label ICA Components', 'Flag ICA Components for Rejection', 'Remove Flagged ICA Components', 'Remove ICA Components (TESA)', 'Epoching', 'Remove Bad Epoch', 'Find TMS Pulses (TESA)', 'Remove TMS Artifacts (TESA)', 'Fix TMS Pulse (TESA)', 'Interpolate Channels', 'Interpolate Missing Data (TESA)', 'Find Artifacts EDM (TESA)', 'SSP SIR', 'Median Filter 1D', 'Extract TEP (TESA)', 'Find TEP Peaks (TESA)', 'TEP Peak Output', 'Remove Recording Noise (SOUND)', 'Visualize EEG Data', 'Manual Command'};
            app.StepsListBox.ValueChangedFcn = createCallbackFcn(app, @StepsListBoxValueChanged, true);
            app.StepsListBox.FontSize = 11;
            app.StepsListBox.Position = [7 155 207 294];
            app.StepsListBox.Value = 'Load Data';

            % Create CommandDescriptionLabel
            app.CommandDescriptionLabel = uilabel(app.LeftPanel);
            app.CommandDescriptionLabel.FontSize = 14;
            app.CommandDescriptionLabel.FontWeight = 'bold';
            app.CommandDescriptionLabel.Position = [9 134 31 22];
            app.CommandDescriptionLabel.Text = 'Info';

            % Create InfoTextArea
            app.InfoTextArea = uitextarea(app.LeftPanel);
            app.InfoTextArea.Editable = 'off';
            app.InfoTextArea.Position = [7 6 207 129];

            % Create StepsListBoxLabel
            app.StepsListBoxLabel = uilabel(app.LeftPanel);
            app.StepsListBoxLabel.FontSize = 16;
            app.StepsListBoxLabel.FontWeight = 'bold';
            app.StepsListBoxLabel.Position = [86 457 49 22];
            app.StepsListBoxLabel.Text = 'Steps';

            % Create CenterPanel
            app.CenterPanel = uipanel(app.GridLayout);
            app.CenterPanel.Layout.Row = 1;
            app.CenterPanel.Layout.Column = 2;
            app.CenterPanel.Scrollable = 'on';

            % Create SelectedListBox
            app.SelectedListBox = uilistbox(app.CenterPanel);
            app.SelectedListBox.Items = {''};
            app.SelectedListBox.ValueChangedFcn = createCallbackFcn(app, @SelectedListBoxValueChanged, true);
            app.SelectedListBox.FontSize = 11;
            app.SelectedListBox.DoubleClickedFcn = createCallbackFcn(app, @SelectedListBoxDoubleClicked, true);
            app.SelectedListBox.Position = [6 86 215 360];
            app.SelectedListBox.Value = '';

            % Create MoveUpButton
            app.MoveUpButton = uibutton(app.CenterPanel, 'push');
            app.MoveUpButton.ButtonPushedFcn = createCallbackFcn(app, @MoveUpButtonPushed, true);
            app.MoveUpButton.BackgroundColor = [0.8 0.8 0.8];
            app.MoveUpButton.Position = [81 45 66 36];
            app.MoveUpButton.Text = {'Move'; 'Up'};

            % Create MoveDownButton
            app.MoveDownButton = uibutton(app.CenterPanel, 'push');
            app.MoveDownButton.ButtonPushedFcn = createCallbackFcn(app, @MoveDownButtonPushed, true);
            app.MoveDownButton.BackgroundColor = [0.8 0.8 0.8];
            app.MoveDownButton.Position = [81 6 66 36];
            app.MoveDownButton.Text = {'Move'; 'Down'};

            % Create AddButton
            app.AddButton = uibutton(app.CenterPanel, 'push');
            app.AddButton.ButtonPushedFcn = createCallbackFcn(app, @AddButtonPushed, true);
            app.AddButton.BackgroundColor = [0.8 0.8 0.8];
            app.AddButton.Position = [8 45 66 36];
            app.AddButton.Text = 'Add';

            % Create RemoveButton
            app.RemoveButton = uibutton(app.CenterPanel, 'push');
            app.RemoveButton.ButtonPushedFcn = createCallbackFcn(app, @RemoveButtonPushed, true);
            app.RemoveButton.BackgroundColor = [0.8 0.8 0.8];
            app.RemoveButton.Position = [8 6 66 36];
            app.RemoveButton.Text = 'Remove';

            % Create LoadPipelineButton
            app.LoadPipelineButton = uibutton(app.CenterPanel, 'push');
            app.LoadPipelineButton.ButtonPushedFcn = createCallbackFcn(app, @LoadPipelineButtonPushed, true);
            app.LoadPipelineButton.BackgroundColor = [0.8 0.8 0.8];
            app.LoadPipelineButton.Position = [153 6 66 36];
            app.LoadPipelineButton.Text = {'Load'; 'Pipeline'};

            % Create SavePipelineButton
            app.SavePipelineButton = uibutton(app.CenterPanel, 'push');
            app.SavePipelineButton.ButtonPushedFcn = createCallbackFcn(app, @SavePipelineButtonPushed, true);
            app.SavePipelineButton.BackgroundColor = [0.8 0.8 0.8];
            app.SavePipelineButton.Position = [153 45 66 36];
            app.SavePipelineButton.Text = {'Save'; 'Pipeline'};

            % Create SelectedListBoxLabel
            app.SelectedListBoxLabel = uilabel(app.CenterPanel);
            app.SelectedListBoxLabel.FontSize = 16;
            app.SelectedListBoxLabel.FontWeight = 'bold';
            app.SelectedListBoxLabel.Position = [54 454 119 25];
            app.SelectedListBoxLabel.Text = 'Selected Steps';

            % Create UITable
            app.UITable = uitable(app.CenterPanel);
            app.UITable.BackgroundColor = [1 1 1;0.8 0.8 0.8];
            app.UITable.ColumnName = {'Properties'; 'Value'};
            app.UITable.RowName = {};
            app.UITable.ColumnSortable = [false true];
            app.UITable.ColumnEditable = [false false];
            app.UITable.CellEditCallback = createCallbackFcn(app, @UITableCellEdit, true);
            app.UITable.CellSelectionCallback = createCallbackFcn(app, @UITableCellSelection, true);
            app.UITable.FontSize = 11;
            app.UITable.Position = [226 89 186 360];

            % Create DefaultValueButton
            app.DefaultValueButton = uibutton(app.CenterPanel, 'push');
            app.DefaultValueButton.ButtonPushedFcn = createCallbackFcn(app, @DefaultValueButtonPushed, true);
            app.DefaultValueButton.BackgroundColor = [0.9608 0.9608 0.9608];
            app.DefaultValueButton.Position = [261 6 110 23];
            app.DefaultValueButton.Text = 'Default Value';

            % Create TextArea
            app.TextArea = uitextarea(app.CenterPanel);
            app.TextArea.ValueChangedFcn = createCallbackFcn(app, @TextAreaValueChanged, true);
            app.TextArea.Position = [226 33 186 52];

            % Create SelectedListBoxLabel_2
            app.SelectedListBoxLabel_2 = uilabel(app.CenterPanel);
            app.SelectedListBoxLabel_2.FontSize = 16;
            app.SelectedListBoxLabel_2.FontWeight = 'bold';
            app.SelectedListBoxLabel_2.Position = [268 454 102 25];
            app.SelectedListBoxLabel_2.Text = 'Parameter(s)';

            % Create RightPanel
            app.RightPanel = uipanel(app.GridLayout);
            app.RightPanel.Layout.Row = 1;
            app.RightPanel.Layout.Column = 3;
            app.RightPanel.Scrollable = 'on';

            % Create Panel
            app.Panel = uipanel(app.RightPanel);
            app.Panel.BorderType = 'none';
            app.Panel.BorderWidth = 0;
            app.Panel.Position = [3 444 208 30];

            % Create SelectDatatoPerformAnalysisPanel
            app.SelectDatatoPerformAnalysisPanel = uipanel(app.RightPanel);
            app.SelectDatatoPerformAnalysisPanel.BorderType = 'none';
            app.SelectDatatoPerformAnalysisPanel.BorderWidth = 0;
            app.SelectDatatoPerformAnalysisPanel.Title = 'Select Data to Perform Analysis';
            app.SelectDatatoPerformAnalysisPanel.Position = [6 202 208 116];

            % Create FolderEditFieldLabel
            app.FolderEditFieldLabel = uilabel(app.SelectDatatoPerformAnalysisPanel);
            app.FolderEditFieldLabel.HorizontalAlignment = 'right';
            app.FolderEditFieldLabel.Position = [5 64 40 22];
            app.FolderEditFieldLabel.Text = 'Folder';

            % Create FolderEditField
            app.FolderEditField = uieditfield(app.SelectDatatoPerformAnalysisPanel, 'text');
            app.FolderEditField.ValueChangedFcn = createCallbackFcn(app, @FolderEditFieldValueChanged, true);
            app.FolderEditField.Editable = 'off';
            app.FolderEditField.Position = [53 64 145 22];

            % Create FileEditFieldLabel
            app.FileEditFieldLabel = uilabel(app.SelectDatatoPerformAnalysisPanel);
            app.FileEditFieldLabel.HorizontalAlignment = 'right';
            app.FileEditFieldLabel.Position = [6 39 25 22];
            app.FileEditFieldLabel.Text = 'File';

            % Create FileEditField
            app.FileEditField = uieditfield(app.SelectDatatoPerformAnalysisPanel, 'text');
            app.FileEditField.ValueChangedFcn = createCallbackFcn(app, @FileEditFieldValueChanged, true);
            app.FileEditField.Editable = 'off';
            app.FileEditField.Position = [53 38 145 22];

            % Create SelectDataButton
            app.SelectDataButton = uibutton(app.SelectDatatoPerformAnalysisPanel, 'push');
            app.SelectDataButton.ButtonPushedFcn = createCallbackFcn(app, @SelectDataButtonPushed, true);
            app.SelectDataButton.Position = [15 5 183 23];
            app.SelectDataButton.Text = 'Select Data';

            % Create RunAnalysisButton
            app.RunAnalysisButton = uibutton(app.RightPanel, 'push');
            app.RunAnalysisButton.ButtonPushedFcn = createCallbackFcn(app, @RunAnalysisButtonPushed, true);
            app.RunAnalysisButton.BackgroundColor = [0 0.4471 0.7412];
            app.RunAnalysisButton.FontSize = 18;
            app.RunAnalysisButton.FontWeight = 'bold';
            app.RunAnalysisButton.FontColor = [1 1 1];
            app.RunAnalysisButton.Position = [10 15 201 54];
            app.RunAnalysisButton.Text = 'Run Analysis';

            % Create Image
            app.Image = uiimage(app.RightPanel);
            app.Image.Position = [10 430 203 44];
            app.Image.ImageSource = fullfile(pathToMLAPP, 'LogoNest.jpg');

            % Create NESTAPPLabel
            app.NESTAPPLabel = uilabel(app.RightPanel);
            app.NESTAPPLabel.FontSize = 14;
            app.NESTAPPLabel.FontWeight = 'bold';
            app.NESTAPPLabel.FontAngle = 'italic';
            app.NESTAPPLabel.Position = [142 425 71 22];
            app.NESTAPPLabel.Text = 'NESTAPP';

            % Create EEGLABpathifalreadyisnotinpathPanel
            app.EEGLABpathifalreadyisnotinpathPanel = uipanel(app.RightPanel);
            app.EEGLABpathifalreadyisnotinpathPanel.BorderType = 'none';
            app.EEGLABpathifalreadyisnotinpathPanel.Title = 'EEGLAB path (if already is not in path)';
            app.EEGLABpathifalreadyisnotinpathPanel.FontSize = 10;
            app.EEGLABpathifalreadyisnotinpathPanel.Position = [8 319 208 90];

            % Create PathEditFieldLabel
            app.PathEditFieldLabel = uilabel(app.EEGLABpathifalreadyisnotinpathPanel);
            app.PathEditFieldLabel.HorizontalAlignment = 'right';
            app.PathEditFieldLabel.Position = [13 40 30 22];
            app.PathEditFieldLabel.Text = 'Path';

            % Create PathEditField
            app.PathEditField = uieditfield(app.EEGLABpathifalreadyisnotinpathPanel, 'text');
            app.PathEditField.Editable = 'off';
            app.PathEditField.Position = [53 40 145 22];

            % Create SelectEEGLABFolderButton
            app.SelectEEGLABFolderButton = uibutton(app.EEGLABpathifalreadyisnotinpathPanel, 'push');
            app.SelectEEGLABFolderButton.ButtonPushedFcn = createCallbackFcn(app, @SelectEEGLABFolderButtonPushed, true);
            app.SelectEEGLABFolderButton.Position = [15 10 183 23];
            app.SelectEEGLABFolderButton.Text = 'Select EEGLAB Folder';

            % Create ReStartStepsButton
            app.ReStartStepsButton = uibutton(app.RightPanel, 'push');
            app.ReStartStepsButton.ButtonPushedFcn = createCallbackFcn(app, @ReStartStepsButtonPushed, true);
            app.ReStartStepsButton.BackgroundColor = [0.4667 0.6745 0.1882];
            app.ReStartStepsButton.FontSize = 18;
            app.ReStartStepsButton.FontWeight = 'bold';
            app.ReStartStepsButton.FontColor = [1 1 1];
            app.ReStartStepsButton.Position = [10 78 201 36];
            app.ReStartStepsButton.Text = 'Re/Start Steps';

            % Create outofEditFieldLabel
            app.outofEditFieldLabel = uilabel(app.RightPanel);
            app.outofEditFieldLabel.HorizontalAlignment = 'center';
            app.outofEditFieldLabel.FontSize = 11;
            app.outofEditFieldLabel.Position = [129 173 36 27];
            app.outofEditFieldLabel.Text = 'out of';

            % Create outofEditField
            app.outofEditField = uieditfield(app.RightPanel, 'text');
            app.outofEditField.FontSize = 11;
            app.outofEditField.Position = [165 175 32 22];

            % Create ProcessingfileEditFieldLabel
            app.ProcessingfileEditFieldLabel = uilabel(app.RightPanel);
            app.ProcessingfileEditFieldLabel.HorizontalAlignment = 'center';
            app.ProcessingfileEditFieldLabel.FontSize = 11;
            app.ProcessingfileEditFieldLabel.Position = [18 173 80 27];
            app.ProcessingfileEditFieldLabel.Text = 'Processing file ';

            % Create ProcessingfileEditField
            app.ProcessingfileEditField = uieditfield(app.RightPanel, 'text');
            app.ProcessingfileEditField.Editable = 'off';
            app.ProcessingfileEditField.Position = [96 175 32 22];

            % Create RunningstepEditFieldLabel
            app.RunningstepEditFieldLabel = uilabel(app.RightPanel);
            app.RunningstepEditFieldLabel.HorizontalAlignment = 'right';
            app.RunningstepEditFieldLabel.Position = [16 146 79 22];
            app.RunningstepEditFieldLabel.Text = 'Running step:';

            % Create RunningstepEditField
            app.RunningstepEditField = uieditfield(app.RightPanel, 'text');
            app.RunningstepEditField.ValueChangedFcn = createCallbackFcn(app, @RunningstepEditFieldValueChanged, true);
            app.RunningstepEditField.Position = [20 123 177 22];

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = nestapp

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            % Execute the startup function
            runStartupFcn(app, @startupFcn)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end